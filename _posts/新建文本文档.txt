# 1. JSP

 JSP （Java Server Pages，即：Java服务器页面），是一种跨平台的动态网页技术标准，它在HTML文件中插入Java程序段(Scriptlet)和JSP标记(tag)，从而形成JSP文件(*.jsp)。 

## 1.1 JSP简介

### JSP概述

-  JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。 
-  JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。 
-  JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。 

### JSP处理过程

1. 客户端浏览器发送一个HTTP**请求**给服务器。
2. Web服务器识别出这是一个对JSP网页的请求，并且将该请求传递给JSP引擎。通过使用URL或者.jsp文件来完成。
3. JSP引擎从磁盘中**载入JSP文件**，然后将它们**转化为servlet**。这种转化只是简单地将所有模板文本改用println()语句，并且将所有的JSP元素转化成Java代码。
4. JSP引擎将**servlet编译**成可执行类，并且将原始请求传递给servlet引擎。
5. Web服务器的某组件将会调用servlet引擎，然后载入并**执行servlet类**。在执行过程中，**servlet产生HTML格式的输出**并将其内嵌于HTTP response中上交给Web服务器。
6. Web服务器以静态HTML网页的形式将HTTP **response**返回到客户端浏览器中。最终，Web浏览器处理HTTP response中动态产生的HTML网页，就好像在处理静态网页一样。

![](https://raw.githubusercontent.com/hihanying/FigureBed/master/img/20191121221306.png)

### JSP生命周期

- **编译阶段：**servlet容器编译servlet源文件，生成servlet类
- **初始化阶段：**加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法。
- **执行阶段：**调用与JSP对应的servlet实例的服务方法
- **销毁阶段：**调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<html>
    <head>
        <title>life.jsp</title>
    </head>
    <body>

<%! 
    private int initVar=0;
    private int serviceVar=0;
    private int destroyVar=0;
%>

<%!
    // 容器载入JSP文件后，它会在为请求提供任何服务前调用jspInit()方法
    // 通常在jspInit()方法中初始化数据库连接、打开文件和创建查询表。
    public void jspInit(){
        initVar++;
        System.out.println("jspInit(): JSP被初始化了"+initVar+"次");
	}
    // 复写jspDestroy()方法执行清理工作，如释放数据库连接或关闭文件夹。
    public void jspDestroy(){
        destroyVar++;
        System.out.println("jspDestroy(): JSP被销毁了"+destroyVar+"次");
    }
%>

<%
    serviceVar++;
    System.out.println("_jspService(): JSP共响应了"+serviceVar+"次请求");

    String content1="初始化次数 : "+initVar;
    String content2="响应客户请求次数 : "+serviceVar;
    String content3="销毁次数 : "+destroyVar;
%>
        <h1>w3cschool教程 JSP 测试实例</h1>
        <p><%=content1 %></p>
        <p><%=content2 %></p>
        <p><%=content3 %></p>
    </body>
</html>
```

## 1.2 JSP 指令和语法

### JSP 脚本

语法格式：` <% 代码片段 %> `

其中的java代码片段转为servlet后在service方法中，也就是说，service方法中可以定义什么，该脚本中就可以定义什么。

### JSP 声明

语法格式： `<%! declaration; [ declaration; ]+ ... %> `

 声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。转换后在java类的成员位置。

### JSP表达式

语法格式： `<%= 表达式 %> `

JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方，即直接输出到页面上对应的位置。 

> 表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。 

### JSP注释

语法格式： `<%-- 这里可以填写 JSP 注释 --%> `

JSP注释，注释内容不会被发送至浏览器甚至不会被编译 

>  HTML注释： `<!-- 注释 --> `
>
>  过浏览器查看网页源代码时可以看见注释内容 

### JSP指令

语法格式：`<%@ directive attribute="value" %>`

JSP指令用来设置与整个JSP页面相关的属性。 指令可以有很多个属性，它们以键值对的形式存在，并用逗号隔开。 有三种指令标签：

| **指令**             | **描述**                                                  |
| :------------------- | :-------------------------------------------------------- |
| `<%@ page ... %>`    | 定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等 |
| `<%@ include ... %>` | 包含其他文件                                              |
| `<%@ taglib ... %>`  | 引入标签库的定义，可以是自定义标签                        |

**1. Page指令**

下表列出与Page指令相关的属性：

| **属性**           | **描述**                                            |
| :----------------- | :-------------------------------------------------- |
| buffer             | 指定out对象使用缓冲区的大小                         |
| autoFlush          | 控制out对象的 缓存区                                |
| **contentType**    | 指定当前JSP页面的MIME类型和字符编码                 |
| **errorPage**      | 指定当JSP页面发生异常时需要转向的错误处理页面       |
| **isErrorPage**    | 指定当前页面是否可以作为另一个JSP页面的错误处理页面 |
| extends            | 指定servlet从哪一个类继承                           |
| **import**         | 导入要使用的Java类                                  |
| info               | 定义JSP页面的描述信息                               |
| isThreadSafe       | 指定对JSP页面的访问是否为线程安全                   |
| language           | 定义JSP页面所用的脚本语言，默认是Java               |
| session            | 指定JSP页面是否使用session                          |
| isELIgnored        | 指定是否执行EL表达式                                |
| isScriptingEnabled | 确定脚本元素能否被使用                              |

**2. Include指令**

JSP可以通过include指令来包含其他文件。

- 被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。
- Include指令中的文件名实际上是一个相对的URL。如果您没有给文件关联一个路径，JSP编译器默认在当前路径下寻找。 

**3. Taglib指令**

JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。

Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。

```jsp
<%@ taglib uri="uri" prefix="prefixOfTag" %>
```

 uri属性确定标签库的位置，prefix属性指定标签库的前缀（自定义）。 

### JSP行为

JSP行为标签使用XML语法结构来控制servlet引擎。

语法格式：`<jsp:action_name attribute="value" />`

### JSP隐含对象

 JSP支持九个自动定义的变量，不需要创建，直接使用，称为隐含对象。这九个隐含对象的简介见下表： 

| **对象**    | **描述**                                                     |
| :---------- | :----------------------------------------------------------- |
| request     | **HttpServletRequest**类的实例                               |
| response    | **HttpServletResponse**类的实例                              |
| out         | **PrintWriter**类的实例，用于把结果输出至网页上              |
| session     | **HttpSession**类的实例                                      |
| application | **ServletContext**类的实例，与应用上下文有关                 |
| config      | **ServletConfig**类的实例                                    |
| pageContext | **PageContext**类的实例，提供对JSP页面所有对象以及命名空间的访问 |
| page        | 类似于Java类中的this关键字                                   |
| Exception   | **Exception**类的对象，代表发生错误的JSP页面中对应的异常对象 |

> response.getWriter()和out.write()的区别：
>
> * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。
> * response.getWriter()数据输出永远在out.write()之前

# 2. JSP高级

## 2.1 EL

### 概述

JSP表达式语言（EL）使得访问存储在JavaBean中的数据变得非常简单。JSP EL既可以用来创建算术表达式也可以用来创建逻辑表达式。在JSP EL表达式内可以使用整型数，浮点数，字符串，常量true、false，还有null。

### 语法

简单的表达式语法：`${expr}`

其中expr指的是表达式。在JSP EL中通用的操作符是"."和"[]"。这两个操作符允许您通过内嵌的JSP对象访问各种各样的JavaBean属性。 

例如，传统方法在JSP标签中指定属性值 ：

```jsp
<jsp:setProperty name="box" property="perimeter" value="100"/>
```

 使用表达式语言改写为 ：

```jsp
<jsp:setProperty name="box" property="perimeter"                   value="${2*box.width+2*box.height}"/>
```

当JSP编译器在属性中见到`"${}"`格式后，它会产生代码来计算这个表达式，并且产生一个替代品来代替表达式的值。

> 如果想要停用EL表达式，需要使用page指令将isELIgnored属性值设为true：
>
> ```jsp
> <%@ page isELIgnored ="true|false" %>
> ```
>
> 这样，EL表达式就会被忽略。若设为false，则容器将会计算EL表达式。

### 运算符

EL表达式支持大部分Java所提供的算术和逻辑操作符：

| **操作符** | **描述**                             |
| :--------- | :----------------------------------- |
| .          | **访问一个Bean属性或者一个映射条目** |
| []         | **访问一个数组或者链表的元素**       |
| ( )        | 组织一个子表达式以改变优先级         |
| +          | 加                                   |
| -          | 减或负                               |
| *          | 乘                                   |
| / or div   | 除                                   |
| % or mod   | 取模                                 |
| == or eq   | 测试是否相等                         |
| != or ne   | 测试是否不等                         |
| < or lt    | 测试是否小于                         |
| > or gt    | 测试是否大于                         |
| <= or le   | 测试是否小于等于                     |
| >= or ge   | 测试是否大于等于                     |
| && or and  | 测试逻辑与                           |
| \|\| or or | 测试逻辑或                           |
| ! or not   | 测试取反                             |
| empty      | **测试是否空值**                     |

> **空运算符： empty**
>
> -  功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0
> -  `${empty list}`：判断字符串、集合、数组对象是否为null或者长度为0
> -  `${not empty str}`：表示判断字符串、集合、数组对象是否不为null 并且 长度>0

### 隐含对象

JSP EL支持下表列出的隐含对象：

| **隐含对象**     | **描述**                      |
| :--------------- | :---------------------------- |
| pageScope        | page 作用域                   |
| requestScope     | request 作用域                |
| sessionScope     | session 作用域                |
| applicationScope | application 作用域            |
| param            | Request 对象的参数，字符串    |
| paramValues      | Request对象的参数，字符串集合 |
| header           | HTTP 信息头，字符串           |
| headerValues     | HTTP 信息头，字符串集合       |
| initParam        | 上下文初始化参数              |
| cookie           | Cookie值                      |
| **pageContext**  | 当前页面的pageContext         |

> **pageContext对象**
>
> - pageContext对象是JSP中pageContext对象的引用。
> - 通过pageContext对象，可以获取jsp其他八个内置对象
> - 例如，访问request对象动态获取虚拟目录：`${pageContext.request.contextPath}`

### 获取值

1. EL表达式只能从域对象中获取值
2. 语法：
   1. ${域名称.键名}：从指定域中获取指定键的值
      -  域名称：
         1. pageScope		--> pageContext
         2. requestScope 	--> request
         3. sessionScope 	--> session
         4. applicationScope --> application（ServletContext）
      -  举例：在request域中存储了name=张三
      -  获取：${requestScope.name}

   2. `${键名}`：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。
   3. 获取对象、List集合、Map集合的值
      1. 对象：${域名称.键名.属性名}
         -  本质上会去调用对象的getter方法
      2. List集合：${域名称.键名[索引]}
      3. Map集合：
         -  ${域名称.键名.key名称}
         -  ${域名称.键名["key名称"]}



## 2.2 JSTL

### 概述

JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。 

用于简化和替换jsp页面上的java代码。

### 使用

**1. 导入jar包**

**2. 引用核心标签库**

核心标签是最常用的JSTL标签。引用核心标签库的语法如下：

```jsp
<%@ taglib prefix="c"            
           uri="http://java.sun.com/jsp/jstl/core" %>
```

**3. 使用标签**

### 常用标签

**` <c:if> 标签`**

- 功能：判断表达式的值，如果表达式的值为真则执行其主体内容。 
- 语法：
    ```jsp
    <c:if test="<boolean>" var="<string>" scope="<string>">
       ...
    </c:if>
    ```

- 属性：

  | **属性** | **描述**               | **是否必要** | **默认值** |
  | :------- | :--------------------- | :----------- | :--------- |
  | test     | 条件                   | 是           | 无         |
  | var      | 用于存储条件结果的变量 | 否           | 无         |
  | scope    | var属性的作用域        | 否           | page       |

- 注意：c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签

**`<c:choose>, <c:when>, <c:otherwise> 标签`**

- 功能：`<c:choose>`标签与Java switch语句的功能一样，用于在众多选项中做出选择。

  - switch语句中有case，而`<c:choose>`标签中对应有`<c:when>`
  - switch语句中有default，而`<c:choose>`标签中有`<c:otherwise>`

- 语法：

  ```jsp
  <c:choose>
      <c:when test="<boolean>"/>
          ...
      </c:when>
      <c:when test="<boolean>"/>
          ...
      </c:when>
      ...
      ...
      <c:otherwise>
          ...
      </c:otherwise>
  </c:choose>
  ```

**`<c:forEach>, <c:forTokens> 标签`**

- 功能：这些标签封装了Java中的for，while，do-while循环。
  - `<c:forEach>`标签是更加通用的标签，因为它迭代一个集合中的对象。
  - `<c:forTokens>`标签将字符串分隔为一个子串数组然后迭代它们。

- 语法：
  - forEach
    ```jsp
    <c:forEach
               items="<object>"
               begin="<int>"
               end="<int>"
               step="<int>"
               var="<string>"
               varStatus="<string>">
        ...
    </c:forEach>
    
    <c:forEach var="i" begin="1" end="5">
        Item <c:out value="${i}"/><p>
    </c:forEach>
    ```
   - forTokens
        ```jsp
        <c:forTokens
                     items="<string>"
                     delims="<string>"
                     begin="<int>"
                     end="<int>"
                   step="<int>"
                     var="<string>"
                     varStatus="<string>">
            ...
        </c:forTokens>
        
        <c:forTokens items="google,w3cschool,taobao" delims="," var="name">
            <c:out value="${name}"/><p>
        </c:forTokens>
        ```
  
- 属性
| **属性**  | **描述**                                   | **是否必要** | **默认值**   |
| :-------- | :----------------------------------------- | :----------- | :----------- |
| items     | 要被循环的信息                             | 否           | 无           |
| begin     | 开始的元素（0=第一个元素，1=第二个元素）   | 否           | 0            |
| end       | 最后一个元素（0=第一个元素，1=第二个元素） | 否           | Last element |
| step      | 每一次迭代的步长                           | 否           | 1            |
| var       | 代表当前条目的变量名称                     | 否           | 无           |
| varStatus | 代表循环状态的变量名称                     | 否           | 无           |
| delims    | 分隔符                                     | 是           | 无           |











